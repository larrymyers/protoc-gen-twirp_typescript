// Code generated by protoc-gen-go. DO NOT EDIT.
// source: example/service.proto

package example

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A Hat is a piece of headwear made by a Haberdasher.
type Hat struct {
	// The size of a hat should always be in inches.
	Size int32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// The color of a hat will never be 'invisible', but other than
	// that, anything is fair game.
	Color string `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	// The name of a hat is it's type. Like, 'bowler', or something.
	Name                 string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CreatedOn            *timestamp.Timestamp `protobuf:"bytes,4,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Hat) Reset()         { *m = Hat{} }
func (m *Hat) String() string { return proto.CompactTextString(m) }
func (*Hat) ProtoMessage()    {}
func (*Hat) Descriptor() ([]byte, []int) {
	return fileDescriptor_45cc183e5db670d0, []int{0}
}

func (m *Hat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Hat.Unmarshal(m, b)
}
func (m *Hat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Hat.Marshal(b, m, deterministic)
}
func (m *Hat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hat.Merge(m, src)
}
func (m *Hat) XXX_Size() int {
	return xxx_messageInfo_Hat.Size(m)
}
func (m *Hat) XXX_DiscardUnknown() {
	xxx_messageInfo_Hat.DiscardUnknown(m)
}

var xxx_messageInfo_Hat proto.InternalMessageInfo

func (m *Hat) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Hat) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *Hat) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Hat) GetCreatedOn() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedOn
	}
	return nil
}

// Size is passed when requesting a new hat to be made. It's always
// measured in inches.
type Size struct {
	Inches               int32    `protobuf:"varint,1,opt,name=inches,proto3" json:"inches,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Size) Reset()         { *m = Size{} }
func (m *Size) String() string { return proto.CompactTextString(m) }
func (*Size) ProtoMessage()    {}
func (*Size) Descriptor() ([]byte, []int) {
	return fileDescriptor_45cc183e5db670d0, []int{1}
}

func (m *Size) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Size.Unmarshal(m, b)
}
func (m *Size) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Size.Marshal(b, m, deterministic)
}
func (m *Size) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Size.Merge(m, src)
}
func (m *Size) XXX_Size() int {
	return xxx_messageInfo_Size.Size(m)
}
func (m *Size) XXX_DiscardUnknown() {
	xxx_messageInfo_Size.DiscardUnknown(m)
}

var xxx_messageInfo_Size proto.InternalMessageInfo

func (m *Size) GetInches() int32 {
	if m != nil {
		return m.Inches
	}
	return 0
}

func init() {
	proto.RegisterType((*Hat)(nil), "twitch.twirp.example.Hat")
	proto.RegisterType((*Size)(nil), "twitch.twirp.example.Size")
}

func init() { proto.RegisterFile("example/service.proto", fileDescriptor_45cc183e5db670d0) }

var fileDescriptor_45cc183e5db670d0 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8f, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x15, 0x9a, 0xb6, 0xca, 0x75, 0xb3, 0x0a, 0x0a, 0x19, 0x20, 0xea, 0x94, 0xc9, 0x91,
	0xca, 0xc4, 0x86, 0x98, 0xb2, 0xa0, 0x4a, 0x81, 0x89, 0x05, 0x5d, 0xd2, 0xa3, 0xb1, 0x48, 0xe2,
	0xc8, 0x3e, 0x28, 0x62, 0xe0, 0xb7, 0x57, 0x71, 0xdc, 0xad, 0xdb, 0x3d, 0xfb, 0xb3, 0xbf, 0x77,
	0x70, 0x4d, 0xbf, 0xd8, 0x0d, 0x2d, 0xe5, 0x96, 0xcc, 0x8f, 0xaa, 0x49, 0x0e, 0x46, 0xb3, 0x16,
	0x6b, 0x3e, 0x2a, 0xae, 0x1b, 0xc9, 0x47, 0x65, 0x06, 0xe9, 0x99, 0xe4, 0xfe, 0xa0, 0xf5, 0xa1,
	0xa5, 0xdc, 0x31, 0xd5, 0xf7, 0x67, 0xce, 0xaa, 0x23, 0xcb, 0xd8, 0x0d, 0xd3, 0xb3, 0xcd, 0x3f,
	0xcc, 0x0a, 0x64, 0x21, 0x20, 0xb4, 0xea, 0x8f, 0xe2, 0x20, 0x0d, 0xb2, 0x79, 0xe9, 0x66, 0xb1,
	0x86, 0x79, 0xad, 0x5b, 0x6d, 0xe2, 0xab, 0x34, 0xc8, 0xa2, 0x72, 0x0a, 0x23, 0xd9, 0x63, 0x47,
	0xf1, 0xcc, 0x1d, 0xba, 0x59, 0x3c, 0x02, 0xd4, 0x86, 0x90, 0x69, 0xff, 0xa1, 0xfb, 0x38, 0x4c,
	0x83, 0x6c, 0xb5, 0x4d, 0xe4, 0xa4, 0x96, 0x67, 0xb5, 0x7c, 0x3b, 0xab, 0xcb, 0xc8, 0xd3, 0xbb,
	0x7e, 0x73, 0x07, 0xe1, 0xeb, 0x28, 0xbb, 0x81, 0x85, 0xea, 0xeb, 0x86, 0xac, 0xaf, 0xe0, 0xd3,
	0x76, 0x07, 0xab, 0x02, 0x2b, 0x32, 0x7b, 0xb4, 0x0d, 0x19, 0xf1, 0x04, 0xcb, 0x17, 0xfc, 0xa2,
	0xb1, 0x72, 0x22, 0x2f, 0x6d, 0x2c, 0xc7, 0xdf, 0x92, 0xdb, 0xcb, 0x77, 0x05, 0xf2, 0x73, 0xf4,
	0xbe, 0xf4, 0xb1, 0x5a, 0xb8, 0x6a, 0x0f, 0xa7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf6, 0xd4, 0xb4,
	0x36, 0x52, 0x01, 0x00, 0x00,
}
